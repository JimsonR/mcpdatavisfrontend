from mcp.server.fastmcp import FastMCP
from mcp.shared.exceptions import McpError
from mcp.types import TextContent, EmbeddedResource, INTERNAL_ERROR, Prompt, PromptArgument, Resource  
import pandas as pd
import numpy as np
import scipy
import sklearn
import statsmodels.api as sm
from io import StringIO
import sys
import os
import re
import json
from typing import Optional, List

mcp = FastMCP(name="mcp_server_ds", host="127.0.0.1", port=8003)

# In-memory data store for loaded DataFrames
_dataframes = {}
_df_count = 0
_notes: list[str] = []

def _next_df_name():
    global _df_count
    _df_count += 1
    return f"df_{_df_count}"

@mcp.tool()
def load_csv(csv_path: str, df_name: Optional[str] = None) -> list:
    """Load a local CSV file into a DataFrame."""
    global _dataframes, _notes
    if not df_name:
        df_name = _next_df_name()
    try:
        _dataframes[df_name] = pd.read_csv(csv_path)
    except UnicodeDecodeError:
        _dataframes[df_name] = pd.read_csv(csv_path, encoding="latin1")
    except Exception as e:
        raise McpError(INTERNAL_ERROR, f"Error loading CSV: {str(e)}")
    _notes.append(f"Successfully loaded CSV into dataframe '{df_name}'")
    return [TextContent(type="text", text=f"Successfully loaded CSV into dataframe '{df_name}'")]

@mcp.tool()
def run_script(script: str, save_to_memory: Optional[List[str]] = None) -> list:
    """Execute a Python script for data analytics tasks."""
    global _dataframes, _notes
    
    # Add plotly and json to local environment for chart generation
    local_dict = {**_dataframes, 'json': json}
    
    # Add plotly imports if available
    try:
        import plotly.express as px
        import plotly.graph_objects as go
        local_dict['px'] = px
        local_dict['go'] = go
    except ImportError:
        pass
    
    try:
        stdout_capture = StringIO()
        old_stdout = sys.stdout
        sys.stdout = stdout_capture
        _notes.append(f"Running script: \n{script}")
        
        # Execute the script with enhanced environment
        exec(script, {
            'pd': pd, 
            'np': np, 
            'scipy': scipy, 
            'sklearn': sklearn, 
            'statsmodels': sm,
            'json': json
        }, local_dict)
        
        std_out_script = stdout_capture.getvalue()
    except Exception as e:
        raise McpError(INTERNAL_ERROR, f"Error running script: {str(e)}")
    finally:
        sys.stdout = old_stdout
    
    if save_to_memory:
        for df_name in save_to_memory:
            if df_name in local_dict:
                _notes.append(f"Saving dataframe '{df_name}' to memory")
                _dataframes[df_name] = local_dict.get(df_name)
    
    output = std_out_script if std_out_script else "No output"
    _notes.append(f"Result: {output}")

    # Enhanced Plotly JSON detection and formatting
    plotly_json = None
    
    # Look for code block with JSON
    match = re.search(r"```json\s*(\{[\s\S]*?\})\s*```", output, re.IGNORECASE)
    if match:
        plotly_json = match.group(0)
    else:
        # Look for inline JSON with Plotly structure
        patterns = [
            r'(\{\s*"data"\s*:\s*\[.*?\][\s\S]*?\})',
            r'(\{\s*"data"\s*:\s*\[[\s\S]*?\]\s*,\s*"layout"\s*:[\s\S]*?\})',
            r'Chart data:\s*(\{[\s\S]*?\})',
            r'Visualization:\s*(\{[\s\S]*?\})',
            r'Plot data:\s*(\{[\s\S]*?\})'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, output, re.IGNORECASE)
            if match:
                try:
                    # Validate it's actually JSON
                    json.loads(match.group(1))
                    plotly_json = f'```json\n{match.group(1)}\n```'
                    break
                except:
                    continue

    if plotly_json:
        return [TextContent(type="text", text=f"Here is your chart:\n\n{plotly_json}")]
    else:
        return [TextContent(type="text", text=f"**Script Output:**\n\n{output}")]

@mcp.tool()
def get_notes() -> list:
    """Return the notes generated by the data exploration server."""
    global _notes
    return [TextContent(type="text", text="\n".join(_notes))]

@mcp.prompt()
def explore_data_prompt():
    return [
        Prompt(
            name="explore-data",
            description="A prompt to explore a csv dataset as a data scientist",
            arguments=[
                PromptArgument(name="csv_path", description="The path to the csv file", required=True),
                PromptArgument(name="topic", description="The topic the data exploration need to focus on", required=False),
            ],
        )
    ]

@mcp.resource("data-exploration://notes")
def notes_resource():
    return [
        Resource(
            uri="data-exploration://notes",
            name="Data Exploration Notes",
            description="Notes generated by the data exploration server",
            mimeType="text/plain"
        )
    ]

if __name__ == "__main__":
    mcp.run(transport="streamable-http")
